"use strict";

function circleOnLine_Collision(circle, line) {
	// circle: x, y, radius
	// line: point A(x, y) -> point B (x, y)

	// Triangle: A -> B -> C, with angles alpha, beta, gamma.
	//    B
	// c / \ a
	//  A - C
	//    b

	// To calculate collision, we will use the circle to form a triangle.
	//    Circle
	// c /  | a
	//  A - B
	//    b

	var lineDis = { x: line.B.x - line.A.x,
		y: line.B.y - line.A.y };
	var c = { x: circle.x - line.A.x,
		y: circle.y - line.A.y };

	var alpha = angle(lineDis, c); // angle between line and c
	var beta = Math.PI - Math.PI / 2 - alpha;

	var a = { x: c.x * Math.sin(alpha) / Math.sin(Math.PI / 2),
		y: c.y * Math.sin(alpha) / Math.sin(Math.PI / 2) };

	var disLineCircle = Math.sqrt(Math.pow(a.x, 2) + Math.pow(a.y, 2));

	if (disLineCircle > circle.radius) return null;

	var b = { x: a.x * Math.sin(beta) / Math.sin(alpha),
		y: a.y * Math.sin(beta) / Math.sin(alpha) };

	var collisionPoint = { x: line.A.x + b.x, y: line.A.y + b.y };

	return collisionPoint;
}

function normalLine(line) {
	// L: A -> B

	var d = distance(line.A, line.B);
	var midPoint = { x: (line.A.x + line.B.x) / 2, y: (line.A.y + line.B.y) / 2 };

	//var slope = (line.b.y - line.a.y) / (line.b.x - line.a.x);
	var negativeSlope = -1 * (line.B.x - line.A.x) / (line.B.y - line.A.y);

	// y = mx + b		
	// --> m = slope // We'll use the negative slope
	// --> x, y = initial point // We'll use the midPoint
	// --> b = our target  -> b = y - mx

	var B = midPoint.y - negativeSlope * midPoint.x;

	// y = mx + b		
	// x = (y - b)/m	

	var line = { A: { x: midPoint.x - d / 2,
			y: (midPoint.x - d / 2) * negativeSlope + B },
		B: { x: midPoint.x + d / 2,
			y: (midPoint.x + d / 2) * negativeSlope + B }
	};
	return line;
}

function distance(P1, P2) {
	return Math.sqrt(Math.pow(P2.x - P1.x, 2) + Math.pow(P2.y - P1.y, 2));
}

function angle(dis1, dis2) {
	// dis x and y of line
	// returns angle between lines
	var upper = dis1.x * dis2.x + dis1.y * dis2.y;
	var lower = Math.sqrt(Math.pow(dis1.x, 2) + Math.pow(dis1.y, 2)) * Math.sqrt(Math.pow(dis2.x, 2) + Math.pow(dis2.y, 2));
	return Math.acos(upper / lower);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy5qcyJdLCJuYW1lcyI6WyJjaXJjbGVPbkxpbmVfQ29sbGlzaW9uIiwiY2lyY2xlIiwibGluZSIsImxpbmVEaXMiLCJ4IiwiQiIsIkEiLCJ5IiwiYyIsImFscGhhIiwiYW5nbGUiLCJiZXRhIiwiTWF0aCIsIlBJIiwiYSIsInNpbiIsImRpc0xpbmVDaXJjbGUiLCJzcXJ0IiwicG93IiwicmFkaXVzIiwiYiIsImNvbGxpc2lvblBvaW50Iiwibm9ybWFsTGluZSIsImQiLCJkaXN0YW5jZSIsIm1pZFBvaW50IiwibmVnYXRpdmVTbG9wZSIsIlAxIiwiUDIiLCJkaXMxIiwiZGlzMiIsInVwcGVyIiwibG93ZXIiLCJhY29zIl0sIm1hcHBpbmdzIjoiOztBQUVBLFNBQVNBLHNCQUFULENBQWlDQyxNQUFqQyxFQUF5Q0MsSUFBekMsRUFBZ0Q7QUFDL0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsS0FBSUMsVUFBVSxFQUFFQyxHQUFHRixLQUFLRyxDQUFMLENBQU9ELENBQVAsR0FBV0YsS0FBS0ksQ0FBTCxDQUFPRixDQUF2QjtBQUNWRyxLQUFHTCxLQUFLRyxDQUFMLENBQU9FLENBQVAsR0FBV0wsS0FBS0ksQ0FBTCxDQUFPQyxDQURYLEVBQWQ7QUFFQSxLQUFJQyxJQUFJLEVBQUVKLEdBQUdILE9BQU9HLENBQVAsR0FBV0YsS0FBS0ksQ0FBTCxDQUFPRixDQUF2QjtBQUNKRyxLQUFHTixPQUFPTSxDQUFQLEdBQVdMLEtBQUtJLENBQUwsQ0FBT0MsQ0FEakIsRUFBUjs7QUFHQSxLQUFJRSxRQUFRQyxNQUFNUCxPQUFOLEVBQWVLLENBQWYsQ0FBWixDQXJCK0MsQ0FxQmhCO0FBQy9CLEtBQUlHLE9BQU9DLEtBQUtDLEVBQUwsR0FBVUQsS0FBS0MsRUFBTCxHQUFRLENBQWxCLEdBQXNCSixLQUFqQzs7QUFFQSxLQUFJSyxJQUFJLEVBQUVWLEdBQUdJLEVBQUVKLENBQUYsR0FB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QVA7QUFDQTs7QUFFRCxTQUFTRyxLQUFULENBQWVtQixJQUFmLEVBQXFCQyxJQUFyQixFQUEyQjtBQUMxQjtBQUNBO0FBQ0EsS0FBSUMsUUFBUUYsS0FBS3pCLENBQUwsR0FBUzBCLEtBQUsxQixDQUFkLEdBQWtCeUIsS0FBS3RCLENBQUwsR0FBU3VCLEtBQUt2QixDQUE1QztBQUNBLEtBQUl5QixRQUFRcEIsS0FBS0ssSUFBTCxDQUFVTCxLQUFLTSxHQUFMLENBQVNXLEtBQUt6QixDQUFkLEVBQWdCLENBQWhCLElBQXFCUSxLQUFLTSxHQUFMLENBQVNXLEtBQUt0QixDQUFkLEVBQWdCLENBQWhCLENBQS9CLElBQXFESyxLQUFLSyxJQUFMLENBQVVMLEtBQUtNLEdBQUwsQ0FBU1ksS0FBSzFCLENBQWQsRUFBZ0IsQ0FBaEIsSUFBcUJRLEtBQUtNLEdBQUwsQ0FBU1ksS0FBS3ZCLENBQWQsRUFBZ0IsQ0FBaEIsQ0FBL0IsQ0FBakU7QUFDQSxRQUFPSyxLQUFLcUIsSUFBTCxDQUFVRixRQUFNQyxLQUFoQixDQUFQO0FBQ0EiLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcblxuZnVuY3Rpb24gY2lyY2xlT25MaW5lX0NvbGxpc2lvbiggY2lyY2xlLCBsaW5lICkge1xuXHQvLyBjaXJjbGU6IHgsIHksIHJhZGl1c1xuXHQvLyBsaW5lOiBwb2ludCBBKHgsIHkpIC0+IHBvaW50IEIgKHgsIHkpXG5cblx0Ly8gVHJpYW5nbGU6IEEgLT4gQiAtPiBDLCB3aXRoIGFuZ2xlcyBhbHBoYSwgYmV0YSwgZ2FtbWEuXG5cdC8vICAgIEJcblx0Ly8gYyAvIFxcIGFcblx0Ly8gIEEgLSBDXG5cdC8vICAgIGJcblxuXHQvLyBUbyBjYWxjdWxhdGUgY29sbGlzaW9uLCB3ZSB3aWxsIHVzZSB0aGUgY2lyY2xlIHRvIGZvcm0gYSB0cmlhbmdsZS5cblx0Ly8gICAgQ2lyY2xlXG5cdC8vIGMgLyAgfCBhXG5cdC8vICBBIC0gQlxuXHQvLyAgICBiXG5cblx0dmFyIGxpbmVEaXMgPSB7IHg6IGxpbmUuQi54IC0gbGluZS5BLngsIFxuXHRcdFx0XHRcdHk6IGxpbmUuQi55IC0gbGluZS5BLnl9O1xuXHR2YXIgYyA9IHsgeDogY2lyY2xlLnggLSBsaW5lLkEueCwgXG5cdFx0XHQgIHk6IGNpcmNsZS55IC0gbGluZS5BLnl9OyBcblxuXHR2YXIgYWxwaGEgPVx0YW5nbGUobGluZURpcywgYyk7XHQvLyBhbmdsZSBiZXR3ZWVuIGxpbmUgYW5kIGNcblx0dmFyIGJldGEgPSBNYXRoLlBJIC0gTWF0aC5QSS8yIC0gYWxwaGE7XG5cblx0dmFyIGEgPSB7IHg6IGMueCpNYXRoLnNpbihhbHBoYSkvTWF0aC5zaW4oTWF0aC5QSS8yKSxcblx0XHRcdCAgeTogYy55Kk1hdGguc2luKGFscGhhKS9NYXRoLnNpbihNYXRoLlBJLzIpIH07XG5cblx0dmFyIGRpc0xpbmVDaXJjbGUgPSBNYXRoLnNxcnQoTWF0aC5wb3coYS54LDIpICsgTWF0aC5wb3coYS55LCAyKSk7XG5cblx0aWYgKGRpc0xpbmVDaXJjbGUgPiBjaXJjbGUucmFkaXVzKVxuXHRcdHJldHVybiBudWxsO1xuXG5cdHZhciBiID0geyB4OiBhLngqTWF0aC5zaW4oYmV0YSkvTWF0aC5zaW4oYWxwaGEpLFxuXHRcdFx0ICB5OiBhLnkqTWF0aC5zaW4oYmV0YSkvTWF0aC5zaW4oYWxwaGEpIH07XG5cblx0dmFyIGNvbGxpc2lvblBvaW50ID0geyB4OiBsaW5lLkEueCArIGIueCwgeTogbGluZS5BLnkgKyBiLnl9O1xuXG5cdHJldHVybiBjb2xsaXNpb25Qb2ludDtcbn1cblxuZnVuY3Rpb24gbm9ybWFsTGluZSAoIGxpbmUgKSB7XG5cdC8vIEw6IEEgLT4gQlxuXHRcblx0dmFyIGQgPSBkaXN0YW5jZShsaW5lLkEsIGxpbmUuQik7XG5cdHZhciBtaWRQb2ludCA9IHsgeDogKGxpbmUuQS54ICsgbGluZS5CLngpLzIsICB5OiAobGluZS5BLnkgKyBsaW5lLkIueSkvMiB9O1xuXHRcblx0Ly92YXIgc2xvcGUgPSAobGluZS5iLnkgLSBsaW5lLmEueSkgLyAobGluZS5iLnggLSBsaW5lLmEueCk7XG5cdHZhciBuZWdhdGl2ZVNsb3BlID0gKC0xKSAqIChsaW5lLkIueCAtIGxpbmUuQS54KSAvIChsaW5lLkIueSAtIGxpbmUuQS55KTtcblx0XG5cdC8vIHkgPSBteCArIGJcdFx0XG5cdC8vIC0tPiBtID0gc2xvcGUgLy8gV2UnbGwgdXNlIHRoZSBuZWdhdGl2ZSBzbG9wZVxuXHQvLyAtLT4geCwgeSA9IGluaXRpYWwgcG9pbnQgLy8gV2UnbGwgdXNlIHRoZSBtaWRQb2ludFxuXHQvLyAtLT4gYiA9IG91ciB0YXJnZXQgIC0+IGIgPSB5IC0gbXhcblx0XG5cdHZhciBCID0gbWlkUG9pbnQueSAtIG5lZ2F0aXZlU2xvcGUqbWlkUG9pbnQueDtcblx0XG5cdC8vIHkgPSBteCArIGJcdFx0XG5cdC8vIHggPSAoeSAtIGIpL21cdFxuXHRcblx0dmFyIGxpbmUgPSB7IEE6IHt4OiAobWlkUG9pbnQueCAtIGQvMiksIFxuXHRcdFx0XHRcdCB5OiAobWlkUG9pbnQueCAtIGQvMikqbmVnYXRpdmVTbG9wZSArIEJ9ICxcblx0XHRcdFx0IEI6IHt4OiAobWlkUG9pbnQueCArIGQvMiksIFxuXHRcdFx0XHRcdCB5OiAobWlkUG9pbnQueCArIGQvMikqbmVnYXRpdmVTbG9wZSArIEJ9IFxuXHRcdFx0XHR9O1xuXHRyZXR1cm4gbGluZTtcbn1cblxuZnVuY3Rpb24gZGlzdGFuY2UoIFAxLCBQMiApIHtcblx0cmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyhQMi54IC0gUDEueCwgMikgKyBNYXRoLnBvdyhQMi55IC0gUDEueSwgMikpO1xufVxuXG5mdW5jdGlvbiBhbmdsZShkaXMxLCBkaXMyKSB7XG5cdC8vIGRpcyB4IGFuZCB5IG9mIGxpbmVcblx0Ly8gcmV0dXJucyBhbmdsZSBiZXR3ZWVuIGxpbmVzXG5cdHZhciB1cHBlciA9IGRpczEueCAqIGRpczIueCArIGRpczEueSAqIGRpczIueTtcblx0dmFyIGxvd2VyID0gTWF0aC5zcXJ0KE1hdGgucG93KGRpczEueCwyKSArIE1hdGgucG93KGRpczEueSwyKSkgKiBNYXRoLnNxcnQoTWF0aC5wb3coZGlzMi54LDIpICsgTWF0aC5wb3coZGlzMi55LDIpKTtcblx0cmV0dXJuIE1hdGguYWNvcyh1cHBlci9sb3dlcik7XG59Il19